Dwibbble - 0.1
Written by Joshua Lee Tucker for Stunnify.

Clearing some things up...
==========================

A 'player' is a Dribbble user.
A 'shot' is a design that player uploads to Dribbble.
A 'rebound' is a response to a shot that a player has uploaded to Dribbble.

How to use Dwibbble
===================

Dwibbble uses the SystemConfiguration framework to check for a connection to the internet. The first thing you need to do is add SystemConfiguration.framework to your project. (Otherwise Dwibbble will not build).

Dwibbble uses a delegate protocol which helps to keep everything very clean and simple. You NEVER have to (nor should) create anything but a Dwibbble object (no DwibbblePlayer or DwibbbleShot objects). 

You ask for all your data through your Dwibbble object using methods such as -getPlayerWithID: and -getShotWithID:. This data is then returned to you as the correct object via the delegate protocol. 

There are 3 delegate protocol methods which you are required to implement in your Dwibbble delegate. These are didReceivePlayer:, didReceiveShot: and didReceiveError:. They all pass ready-to-use information to your delegate.

I have included an example for iOS using the 4.0 SDK which shows you how to implement Dwibbble in an application. My example shows you how to get a player's avatar using Dwibbble.

I hope you enjoy using Dwibbble, it's certainly fun to write and maintain such a useful library.

About
=====

If you use Dwibbble, please give attribution to Joshua Lee Tucker or Stunnify.

Please read the LICENSE file for more information.
